#!/usr/bin/env python3
import json
import subprocess

import inquirer

from utils import get_working_mastodon

TAGS = [
    "ANTISEMITISM",
    "CONSPIRACY",
    "CROSSPOSTER",
    "DISCRIMINATION",
    "FREE SPEECH ZONE",
    "HARASSMENT",
    "HOMOPHOBIA",
    "LOLICON",
    "MISOGYNIA",
    "NATIONALISM",
    "PEDOPHILIA",
    "PRIVACY",
    "RACISM",
    "RIGHTWING",
    "SCAM",
    "SPAM",
    "TRANSPHOBIA",
    "UNMODERATED",
]


def main():
    questions = [
        inquirer.Text(name="instance", message="Instance URL"),
        inquirer.List(
            name="block_type",
            message="Block level",
            choices=(
                ("Block", "blocked_instances.json"),
                ("Limit", "limited_instances.json"),
            ),
            default="Block",
        ),
        inquirer.Checkbox(
            name="tags", message="Categories", choices=TAGS, carousel=True
        ),
        inquirer.Text(
            name="receipts",
            message="Receipts, optional (comma-separated for multiple)",
            default="",
        ),
        inquirer.Text(
            name="comment_en", message="Comment (English, optional)", default=""
        ),
    ]
    answers = inquirer.prompt(questions)
    if answers.get("comment_en").strip():
        answers["comment_de"] = inquirer.text_input(message="Comment (German)")
    else:
        answers["comment_de"] = ""

    for key in ("instance", "comment_en", "comment_de"):
        answers[key] = answers[key].strip()

    answers["receipts"] = [
        r.strip() for r in answers["receipts"].split(",") if r.strip()
    ]

    path = f"_data/{answers.pop('block_type')}"
    with open(path, "r") as f:
        data = json.load(f)

    if answers["instance"].startswith("https://"):
        answers["instance"] = answers["instance"][len("https://") :]

    if any(instance["instance"] == answers["instance"] for instance in data):
        print("Instance already in list")
        return

    data.append(answers)
    write_blocked_instances(data, path)
    print("Instance added to block list data.")

    block_url = (
        f"https://chaos.social/admin/domain_blocks/new?_domain={answers['instance']}"
    )
    try:
        mastodon = get_working_mastodon()
    except ImportError:
        print(f"mastodon-py not installed, please block manually: {block_url}")
        return

    try:
        mastodon.admin_create_domain_block(
            domain=answers["instance"],
            severity="suspend" if "block" in str(path) else "silence",
        )
    except Exception as e:
        print(f"Failed to block domain via API: {e}")
        print(f"Please block the domain manually: {block_url}")
        return

    subprocess.run(["git", "add", path])
    action = "Block" if "block" in str(path) else "Limit"
    comment = answers["comment_en"] or answers["comment_de"]
    commit_message = f"{action} {answers['instance']}"
    if comment:
        commit_message += f"\n\n{comment}"
    subprocess.run(["git", "commit", "-m", commit_message])


if __name__ == "__main__":
    main()
